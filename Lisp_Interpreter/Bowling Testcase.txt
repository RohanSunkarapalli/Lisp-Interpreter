(define iter (score frame shots) (if (nil? shots) score ((lambda (n) (if (= frame 10) (iter (+ score n) frame (cdr shots)) (if (= n 10) (iter (+ score n (car (cdr shots)) (car (cdr (cdr shots)))) (+ frame 1) (cdr shots)) ((lambda (s) (if (= s 10) (iter (+ score s (car (cdr (cdr shots)))) (+ frame 1) (cdr (cdr shots))) (iter (+ score s) (+ frame 1) (cdr (cdr shots))))) (+ n (car (cdr shots))))))) (car shots))))

(define bowling (shots) (iter 0 1 shots))

1. (bowling '(5 3 5 3 3 5 5 3 3 5 3 5 6 2 2 6 7 1 1 7))
Expected Output - 80

2. (bowling '(0 0 0 0     0 0 0 0        0 0 0 0      0 0 0 0     10 5 4))
Expected Output - 28

3. (bowling '(0 0 0 0     0 0 0 0        0 0 0 0      0 0 0 0     0 0 10 5 4))
Expected Output - 19

4. (bowling '(10 10 10 10     10 10 10 10     10 10 10 10))
Expected Output - 300

5. (bowling '(0 0 0 0     0 0 0 0        0 0 0 0      0 0 0 0     0 0 0 0))
Expected Output - 0
